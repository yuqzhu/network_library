//通过回调函数指定用户定义的日志参数接口。
typedef void (*event_log_cb)(int severity, const char *msg);  
void event_set_log_callback(event_log_cb cb);  
在调用日志的时候通过API进行调用日志接口。
void event_err(int eval, const char *fmt, ...);  
void event_warn(const char *fmt, ...);  
void event_sock_err(int eval, evutil_socket_t sock, const char *fmt, ...);  
void event_sock_warn(evutil_socket_t sock, const char *fmt, ...);

API接口的实现：
event_err(int eval, const char *fmt, ...)
{
    va_list ap;   
    va_start(ap, fmt);  
    _warn_helper(_EVENT_LOG_WARN, strerror(errno), fmt, ap);  
    va_end(ap);  
}
 void _warn_helper(int severity, const char *errstr, const char *fmt, va_list ap);  
{
      event_log(severity, buf);
}
void event_log(int severity, const char *buf)
{
    if (log_fn)  
      log_fn(severity, msg);//调用用户的日志回调函数  
   else
    (void)fprintf(stderr, "[%s] %s\n", severity_str, msg);//输出到标准错误终端上
}
